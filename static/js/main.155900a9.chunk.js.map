{"version":3,"sources":["components/Toolbar/Toolbar.module.css","components/WeatherReveal/WeatherReveal.module.css","containers/Layout/Layout.module.css","components/WeatherInput/WeatherInput.module.css","UI/Loader/Loader.module.css","UI/Aux/Aux.js","components/Toolbar/Toolbar.js","containers/Layout/Layout.js","store/actions/actions.js","store/actions/actionTypes.js","components/WeatherInput/WeatherInput.js","components/WeatherReveal/WeatherReveal.js","UI/Loader/Loader.js","App.js","serviceWorker.js","store/reducers/reducer.js","index.js"],"names":["module","exports","aux","props","children","toolbar","className","classes","header","h2","Layout","Aux","Toolbar","Content","this","Component","newPlace","place","code","dispatch","console","log","type","axios","get","then","response","data","setNewPlace","catch","error","setNewPlaceFail","WeatherInput","Input","placeholder","options","appId","apiKey","language","onChange","query","rawAnswer","suggestion","suggestionIndex","onNewPlace","name","countryCode","connect","actions","weatherReveal","viewedUnits","units","Reveal","placeName","currentDay","currentTime","alt","Status","src","placeIcon","placeStatus","placeTemp","toFixed","placeTempFeel","placeTempMin","placeTempMax","IconDiv","Icon","icon","faTint","placeHumidity","faWind","placeWind","faCompress","placePressure","Handler","onClick","clicked","Button","loader","App","temperatureConverter","status","value","show","loading","Loader","WeatherReveal","date","day","time","weather","description","main","temp","feels_like","temp_min","temp_max","humidity","wind","speed","pressure","onSetUnits","state","Boolean","window","location","hostname","match","initialState","DAYS","1","2","3","4","5","6","0","reducer","action","today","Date","zero","getMinutes","length","dateFormated","getDay","getHours","getSeconds","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.155900a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Toolbar_header__1lCeC\",\"h2\":\"Toolbar_h2__3pEnO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Reveal\":\"WeatherReveal_Reveal__1hJH5\",\"IconDiv\":\"WeatherReveal_IconDiv__2ucbb\",\"Icon\":\"WeatherReveal_Icon__KFO8z\",\"Status\":\"WeatherReveal_Status__3XuJ9\",\"Handler\":\"WeatherReveal_Handler__1pFpO\",\"Button\":\"WeatherReveal_Button__22P5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__PrDi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"WeatherInput_Input__2ukrc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__2u-uR\",\"load5\":\"Loader_load5__29JB7\"};","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport classes from './Toolbar.module.css';\n\nconst toolbar = () => (\n    <header className={classes.header}>\n        <h2 className={classes.h2} >Weather App</h2>\n    </header>\n)\n\nexport default toolbar;","import React, {Component} from 'react';\nimport classes from './Layout.module.css';\nimport Aux from '../../UI/Aux/Aux';\nimport Toolbar from '../../components/Toolbar/Toolbar';\n\n//src/components/Toolbar/Toolbar.js\n\nclass Layout extends Component {\n    render(){\n        return(\n            <Aux>\n                <Toolbar />\n                <main className={classes.Content}>\n                    \n                    {this.props.children}\n                </main>\n            </Aux>\n        )\n    }\n}\n\nexport default Layout","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setNewPlace = (place)=> {\n    return {\n        type:actionTypes.SET_PLACE,\n        place: place\n    };\n};\n\nexport const setNewPlaceFail = (error) => {\n    return {\n        type: actionTypes.SET_PLACE_FAIL,\n        error: error\n    };\n};\n\nexport const setNewPlaceStart = () => {\n    return {\n        type: actionTypes.SET_PLACE_START\n    };\n};\n\nexport const setUnits = () => {\n    return {\n        type: actionTypes.SET_UNITS\n    };\n};\n\nexport const newPlace = (place, code)=>{\n    return dispatch => {\n        console.log(place, code)\n        dispatch(setNewPlaceStart())\n        axios.get('https://api.openweathermap.org/data/2.5/weather?q='+place+','+code+'&appid=84dff302558be91ca0e5cbe998a8c827&units=metric')\n            .then(response => {\n                const place = response.data;\n                dispatch(setNewPlace(place))\n            })\n            .catch(error => {\n                dispatch(setNewPlaceFail(error))\n            })\n    }\n}\n\n\n\n\n\n\n\n\n\n\n","\nexport const SET_PLACE = 'SET_PLACE';\nexport const SET_PLACE_START = 'SET_PLACE_START';\nexport const SET_PLACE_FAIL = 'SET_PLACE_FAIL';\nexport const SET_UNITS = 'SET_UNITS';\n","import React, {Component} from 'react';\nimport classes from './WeatherInput.module.css'\nimport AlgoliaPlaces from 'algolia-places-react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass WeatherInput extends Component {\n    render(){\n        return (\n        <div className={classes.Input}>\n            <AlgoliaPlaces\n            placeholder=\"Choose your place\"\n            options={{\n                appId:'pl4IFRDT6XET',\n                apiKey:'9290d3070bea96a40b5af176775b93be',\n                language:'en',\n                type:'city'\n            }}\n\n            onChange={({ query, rawAnswer, suggestion, suggestionIndex }) => {\n                console.log(suggestion);\n                this.props.onNewPlace(suggestion.name, suggestion.countryCode)\n            }\n                \n            }\n            />\n        </div> \n        )\n    }\n} \n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onNewPlace: (place, code) => dispatch(actions.newPlace(place, code))\n      \n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(WeatherInput);","import React from 'react';\nimport classes from './WeatherReveal.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTint, faWind, faCompress } from '@fortawesome/free-solid-svg-icons';\n\nconst weatherReveal = (props) => {\n    let viewedUnits = props.units ? '°C' : '°F';\n    return (\n        <div className={classes.Reveal} >\n            <h3> {props.placeName} </h3>\n            <h5> {props.currentDay} {props.currentTime} </h5>\n            <img alt='Place status icon' className={classes.Status} src={'http://openweathermap.org/img/wn/'+props.placeIcon+'@2x.png'} />\n            <h5> {props.placeStatus} </h5> \n            <h1> {(props.placeTemp).toFixed(1) } {viewedUnits} </h1>\n            <h5> Feels like  {(props.placeTempFeel).toFixed(1)} {viewedUnits} </h5>\n            <h5> Min {(props.placeTempMin).toFixed(1)} {viewedUnits} Max {(props.placeTempMax).toFixed(1)} {viewedUnits} </h5>\n            <div className={classes.IconDiv} >\n                <FontAwesomeIcon className={classes.Icon}  icon={faTint} />\n                <p> {props.placeHumidity} % </p>\n            </div>\n            <div className={classes.IconDiv} >\n                <FontAwesomeIcon className={classes.Icon} icon={faWind} />\n                <p> {(props.placeWind*3.6).toFixed(2)} km/h </p>\n            </div>\n            <div className={classes.IconDiv} >\n                <FontAwesomeIcon className={classes.Icon} icon={faCompress} />\n                <p> {props.placePressure} Pa </p>\n            </div>\n            \n            \n            <div className={classes.Handler} >\n                <button onClick={props.clicked} className={classes.Button} >°C / °F </button>\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default weatherReveal","import React from 'react';\nimport classes from './Loader.module.css'\n\nconst loader = ()=> (\n    <div className={classes.loader} > Loading</div>\n)\n\nexport default loader;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Layout from './containers/Layout/Layout';\nimport WeatherInput from './components/WeatherInput/WeatherInput';\nimport WeatherReveal from './components/WeatherReveal/WeatherReveal';\nimport Loader from './UI/Loader/Loader'\nimport * as actions from './store/actions/index';\nimport './App.css';\n\nclass App extends Component {\n  \n  temperatureConverter = (status, value) => {\n    //false state for Fahr, true for Celsius(default)\n    if(!status){\n      return value*1.8000+32.00\n    } else {\n        return value\n      }\n    }\n\n  render(){\n    let show = null;\n    if (this.props.loading == true){\n      show = <Loader />\n    } else if (this.props.place == null){\n      show = <Loader />\n      this.props.onNewPlace('Brno','cz')\n    }\n     else {\n      show = <WeatherReveal\n          currentDay={this.props.date.day} \n          currentTime={this.props.date.time}\n          placeName={this.props.place.name}\n          placeIcon={this.props.place.weather[0].icon}\n          placeStatus={this.props.place.weather[0].description}\n          placeTemp={this.temperatureConverter(this.props.units, this.props.place.main.temp) }\n          placeTempFeel={ this.temperatureConverter(this.props.units, this.props.place.main.feels_like) }\n          placeTempMin={this.temperatureConverter(this.props.units, this.props.place.main.temp_min)}\n          placeTempMax={this.temperatureConverter(this.props.units, this.props.place.main.temp_max)}\n          placeHumidity={this.props.place.main.humidity}\n          placeWind={this.props.place.wind.speed}\n          placePressure={this.props.place.main.pressure}\n          clicked={()=>this.props.onSetUnits()}\n          units={this.props.units}\n        />\n    }\n\n    return (\n      <Layout>\n       <WeatherInput />\n       {show}\n      </Layout>\n    )\n  }\n} \n\nconst mapStateToProps = state => {\n  return {\n    place: state.place,\n    loading: state.loading,\n    units: state.units,\n    date: state.date\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onNewPlace: (place, code) => dispatch(actions.newPlace(place, code)),\n      onSetUnits: () => dispatch(actions.setUnits())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    place: null,\n    loading: false,\n    units: true,\n    date: null\n}\n\nconst DAYS = {\n    1:'MON',\n    2:'TUE',\n    3:'WDN',\n    4:'THR',\n    5:'FRI',\n    6:'SAT',\n    0:'SUN'\n}\n\nconst reducer = (state=initialState, action) => {\n    switch (action.type){\n        case actionTypes.SET_PLACE:\n            let today = new Date()\n            let zero = today.getMinutes().length < 2 ? \"0\" : \"\"\n            let dateFormated = {\n                day: DAYS[today.getDay()],\n                time: today.getHours() + \":\" +zero+ today.getMinutes() + \":\" + today.getSeconds()\n            }\n            return {\n                ...state,\n                place: action.place,\n                date: dateFormated,\n                loading: false\n            }\n        case actionTypes.SET_PLACE_START:\n            return {\n                ...state,\n                loading: true\n            }\n        case actionTypes.SET_PLACE_FAIL:\n            return {\n                ...state,\n                loading: false\n            }\n        case actionTypes.SET_UNITS:\n            return {\n                ...state,\n                units: !state.units\n            }\n        default:\n            return state\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/reducer';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers (applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}